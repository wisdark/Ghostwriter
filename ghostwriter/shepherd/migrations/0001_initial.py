# Generated by Django 2.2.3 on 2019-07-26 00:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("rolodex", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ActivityType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "activity",
                    models.CharField(
                        help_text="Reason for the use of the asset (e.g. C2, Phishing)", max_length=100, unique=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity type",
                "verbose_name_plural": "Activity types",
                "ordering": ["activity"],
            },
        ),
        migrations.CreateModel(
            name="Domain",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        help_text="Enter the domain name", max_length=100, unique=True, verbose_name="Name"
                    ),
                ),
                (
                    "registrar",
                    models.CharField(
                        blank=True,
                        help_text="Enter the name of the registrar where this domain is registered",
                        max_length=100,
                        null=True,
                        verbose_name="Registrar",
                    ),
                ),
                (
                    "dns_record",
                    models.CharField(
                        blank=True,
                        help_text="Enter the domain's DNS records - leave blank if you would prefer to let Ghostwriter fill this in later",
                        max_length=500,
                        null=True,
                        verbose_name="DNS Records",
                    ),
                ),
                (
                    "health_dns",
                    models.CharField(
                        blank=True,
                        help_text='Enter passive DNS information from VirusTotal - leave blank or enter "Healthy" if you do not know',
                        max_length=100,
                        null=True,
                        verbose_name="DNS Health",
                    ),
                ),
                (
                    "creation",
                    models.DateField(
                        help_text="Select the date the domain was purchased", verbose_name="Purchase Date"
                    ),
                ),
                (
                    "expiration",
                    models.DateField(
                        help_text="Select the date the domain will expire", verbose_name="Expiration Date"
                    ),
                ),
                (
                    "all_cat",
                    models.TextField(
                        blank=True,
                        help_text="Enter all categories applied to this domain",
                        null=True,
                        verbose_name="All Categories",
                    ),
                ),
                (
                    "ibm_xforce_cat",
                    models.CharField(
                        blank=True,
                        help_text="Provide the list of categories determined by IBM X-Force",
                        max_length=100,
                        null=True,
                        verbose_name="IBM X-Force",
                    ),
                ),
                (
                    "talos_cat",
                    models.CharField(
                        blank=True,
                        help_text="Provide the list of categories determined by Cisco Talos",
                        max_length=100,
                        null=True,
                        verbose_name="Cisco Talos",
                    ),
                ),
                (
                    "bluecoat_cat",
                    models.CharField(
                        blank=True,
                        help_text="Provide the list of categories determined by Bluecoat",
                        max_length=100,
                        null=True,
                        verbose_name="Bluecoat",
                    ),
                ),
                (
                    "fortiguard_cat",
                    models.CharField(
                        blank=True,
                        help_text="Provide the list of categories determined by Fortiguard",
                        max_length=100,
                        null=True,
                        verbose_name="Fortiguard",
                    ),
                ),
                (
                    "opendns_cat",
                    models.CharField(
                        blank=True,
                        help_text="Provide the list of categories determined by OpenDNS",
                        max_length=100,
                        null=True,
                        verbose_name="OpenDNS",
                    ),
                ),
                (
                    "trendmicro_cat",
                    models.CharField(
                        blank=True,
                        help_text="Provide the list of categories determined by TrendMicro",
                        max_length=100,
                        null=True,
                        verbose_name="TrendMicro",
                    ),
                ),
                (
                    "mx_toolbox_status",
                    models.CharField(
                        blank=True,
                        help_text="Enter the domain spam/blacklist status as determined by MX Toolbox",
                        max_length=100,
                        null=True,
                        verbose_name="MX Toolbox Status",
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Use this area to provide notes and thoughts behind its purchase and intended use",
                        null=True,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "burned_explanation",
                    models.TextField(
                        blank=True,
                        help_text="Include details such as how the domain was detected, why it was blacklisted for spam, if it was flagged with a bad category, etc.",
                        null=True,
                        verbose_name="Health Explanation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Domain",
                "verbose_name_plural": "Domains",
                "ordering": ["health_status", "name", "expiration"],
            },
        ),
        migrations.CreateModel(
            name="DomainStatus",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "domain_status",
                    models.CharField(help_text="Domain status type (e.g. Available)", max_length=20, unique=True),
                ),
            ],
            options={
                "verbose_name": "Domain status",
                "verbose_name_plural": "Domain statuses",
                "ordering": ["domain_status"],
            },
        ),
        migrations.CreateModel(
            name="HealthStatus",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "health_status",
                    models.CharField(help_text="Health status type (e.g. Healthy, Burned)", max_length=20, unique=True),
                ),
            ],
            options={
                "verbose_name": "Health status",
                "verbose_name_plural": "Health statuses",
                "ordering": ["health_status"],
            },
        ),
        migrations.CreateModel(
            name="ServerProvider",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "server_provider",
                    models.CharField(
                        help_text="Name of the server provider (e.g. Amazon Web Services, Azure)",
                        max_length=20,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Server provider",
                "verbose_name_plural": "Server providers",
                "ordering": ["server_provider"],
            },
        ),
        migrations.CreateModel(
            name="ServerRole",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "server_role",
                    models.CharField(
                        help_text="A role for applied to the use of a server (e.g. Payload Delivery, Redirector)",
                        max_length=100,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Server role",
                "verbose_name_plural": "Server roles",
                "ordering": ["server_role"],
            },
        ),
        migrations.CreateModel(
            name="ServerStatus",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "server_status",
                    models.CharField(help_text="Server status (e.g. Available)", max_length=20, unique=True),
                ),
            ],
            options={
                "verbose_name": "Server status",
                "verbose_name_plural": "Server statuses",
                "ordering": ["server_status"],
            },
        ),
        migrations.CreateModel(
            name="WhoisStatus",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "whois_status",
                    models.CharField(
                        help_text="WHOIS privacy status (e.g. Enabled, Disabled)", max_length=20, unique=True
                    ),
                ),
            ],
            options={
                "verbose_name": "WHOIS status",
                "verbose_name_plural": "WHOIS statuses",
                "ordering": ["whois_status"],
            },
        ),
        migrations.CreateModel(
            name="TransientServer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="Enter the server IP address", unique=True, verbose_name="IP Address"
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="use this area to provide project-related notes, such as how the server will be used/how it worked out",
                        null=True,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "activity_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select how this VPS will be used",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shepherd.ActivityType",
                    ),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the user who added this server",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Select the project associated with this server",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rolodex.Project",
                    ),
                ),
                (
                    "server_provider",
                    models.ForeignKey(
                        help_text="Select the service provider for this server",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shepherd.ServerProvider",
                    ),
                ),
                (
                    "server_role",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the role this VPS will play",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shepherd.ServerRole",
                    ),
                ),
            ],
            options={
                "verbose_name": "Virtual private server",
                "verbose_name_plural": "Virtual private servers",
                "ordering": ["project", "server_provider", "ip_address", "server_role"],
            },
        ),
        migrations.CreateModel(
            name="StaticServer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="Enter the server's static IP address", unique=True, verbose_name="IP Address"
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Use this area to provide server-related notes, such as its designated use or how it can be used",
                        null=True,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "last_used_by",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "server_provider",
                    models.ForeignKey(
                        help_text="Select the service provider for this server",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shepherd.ServerProvider",
                    ),
                ),
                (
                    "server_status",
                    models.ForeignKey(
                        help_text="Enter the server's current status - typically Available unless it needs to be set aside immediately upon creation",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shepherd.ServerStatus",
                    ),
                ),
            ],
            options={
                "verbose_name": "Static server",
                "verbose_name_plural": "Static servers",
                "ordering": ["server_status", "server_provider", "ip_address"],
            },
        ),
        migrations.CreateModel(
            name="ServerNote",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "timestamp",
                    models.DateField(
                        auto_now_add=True, help_text="Creation timestamp", max_length=100, verbose_name="Timestamp"
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Use this area to add a note to this server - it can be anything you want others to see/know about the server",
                        null=True,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
                ("server", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="shepherd.StaticServer")),
            ],
            options={
                "verbose_name": "Server note",
                "verbose_name_plural": "Server notes",
                "ordering": ["server", "-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="ServerHistory",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "start_date",
                    models.DateField(
                        help_text="Select the start date of the project", max_length=100, verbose_name="Start Date"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        help_text="Select the end date of the project", max_length=100, verbose_name="End Date"
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Use this area to provide project-related notes, such as how the server/IP will be used",
                        null=True,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "activity_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the intended activity to be performed by the server",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shepherd.ActivityType",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        help_text="Select the client associated with the checkout",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rolodex.Client",
                    ),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the user associated with this checkout",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Select the project associated with the checkout - this field will populate after you select a client above",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rolodex.Project",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        help_text="Select the server being checked out",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="shepherd.StaticServer",
                    ),
                ),
                (
                    "server_role",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the intended role the server will play",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shepherd.ServerRole",
                    ),
                ),
            ],
            options={
                "verbose_name": "Server history",
                "verbose_name_plural": "Server history",
                "ordering": ["client", "server"],
            },
        ),
        migrations.CreateModel(
            name="History",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "start_date",
                    models.DateField(
                        help_text="Select the start date of the project", max_length=100, verbose_name="Start Date"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        help_text="Select the end date of the project", max_length=100, verbose_name="End Date"
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Use this area to provide project-related notes, such as how the domain will be used/how it worked out",
                        null=True,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "activity_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the intended use of this domain",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="shepherd.ActivityType",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        help_text="Select the client associated with this checkout",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rolodex.Client",
                    ),
                ),
                (
                    "domain",
                    models.ForeignKey(
                        help_text="Select the domain you wish to check-out",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="shepherd.Domain",
                    ),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        blank=True,
                        help_text="Select the user checking out this domain",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        help_text="Select the project associated with the checkout - this field will populate after you select a client above",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rolodex.Project",
                    ),
                ),
            ],
            options={
                "verbose_name": "Domain history",
                "verbose_name_plural": "Domain history",
                "ordering": ["client", "domain", "activity_type", "start_date"],
            },
        ),
        migrations.CreateModel(
            name="DomainServerConnection",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "endpoint",
                    models.CharField(
                        blank=True,
                        help_text="The CDN endpoint used with this link, if any",
                        max_length=100,
                        null=True,
                        verbose_name="CDN Endpoint",
                    ),
                ),
                (
                    "subdomain",
                    models.CharField(
                        blank=True,
                        default="*",
                        help_text="The subdomain used for this domain record",
                        max_length=100,
                        null=True,
                        verbose_name="Subdomain",
                    ),
                ),
                (
                    "domain",
                    models.ForeignKey(
                        help_text="Select the domain to link to one of the servers provisioned for this project",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="shepherd.History",
                    ),
                ),
                ("project", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="rolodex.Project")),
                (
                    "static_server",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="shepherd.ServerHistory"
                    ),
                ),
                (
                    "transient_server",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="shepherd.TransientServer",
                    ),
                ),
            ],
            options={
                "verbose_name": "Domain and server record",
                "verbose_name_plural": "Domain and server records",
                "ordering": ["project", "domain"],
            },
        ),
        migrations.CreateModel(
            name="DomainNote",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "timestamp",
                    models.DateField(
                        auto_now_add=True, help_text="Creation timestamp", max_length=100, verbose_name="Timestamp"
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True,
                        help_text="Use this area to add a note to this domain - it can be anything you want others to see/know about the domain",
                        null=True,
                        verbose_name="Notes",
                    ),
                ),
                ("domain", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="shepherd.Domain")),
                (
                    "operator",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "Domain note",
                "verbose_name_plural": "Domain notes",
                "ordering": ["domain", "-timestamp"],
            },
        ),
        migrations.AddField(
            model_name="domain",
            name="domain_status",
            field=models.ForeignKey(
                help_text="The domain's current status - set to Available in most cases, or set to Reserved if it should not be used yet",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="shepherd.DomainStatus",
            ),
        ),
        migrations.AddField(
            model_name="domain",
            name="health_status",
            field=models.ForeignKey(
                help_text="The domain's current health status - set to Healthy if you are not sure and assumed the domain is ready to be used",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="shepherd.HealthStatus",
            ),
        ),
        migrations.AddField(
            model_name="domain",
            name="last_used_by",
            field=models.ForeignKey(
                blank=True,
                help_text="The last user to checkout this domain",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="domain",
            name="whois_status",
            field=models.ForeignKey(
                help_text="The domain's WHOIS privacy status - you want this to be Enabled with your registrar",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="shepherd.WhoisStatus",
            ),
        ),
    ]
